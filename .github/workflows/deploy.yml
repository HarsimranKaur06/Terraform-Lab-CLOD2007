name: Terraform Deployment

on:
  push:
    branches:
      - master

jobs:
  step2:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Authenticate to GCP
        run: echo '${{ secrets.GOOGLE_CREDENTIALS }}' > credentials.json
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

      - name: Terraform Init (Step 2)
        run: terraform init
        working-directory: ./step2

      - name: Terraform Plan (Step 2)
        run: terraform plan -out=tfplan -var="ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}"
        working-directory: ./step2

      - name: Terraform Apply (Step 2)
        run: terraform apply -auto-approve -var="ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}"
        working-directory: ./step2

      - name: Terraform Destroy (Step 2)
        if: failure()  # Run only if the job fails
        run: terraform destroy -auto-approve -var="ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}"
        working-directory: ./step2

  step3:
    runs-on: ubuntu-latest
    needs: step2  # Ensure Step 2 runs before Step 3

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Authenticate to GCP
        run: echo '${{ secrets.GOOGLE_CREDENTIALS }}' > credentials.json
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

      - name: Terraform Init (Step 3)
        run: terraform init
        working-directory: ./step3

      - name: Terraform Plan (Step 3)
        run: terraform plan -out=tfplan
        working-directory: ./step3

      - name: Terraform Apply (Step 3)
        run: terraform apply -auto-approve
        working-directory: ./step3

      - name: Terraform Destroy (Step 3)
        if: failure()  # Run only if the job fails
        run: terraform destroy -auto-approve
        working-directory: ./step3